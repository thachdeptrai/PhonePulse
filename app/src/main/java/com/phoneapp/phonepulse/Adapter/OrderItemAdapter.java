package com.phoneapp.phonepulse.Adapter;

import android.annotation.SuppressLint;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.phoneapp.phonepulse.R;
import com.phoneapp.phonepulse.data.api.ApiService;
import com.phoneapp.phonepulse.data.api.RetrofitClient;
import com.phoneapp.phonepulse.models.Product;
import com.phoneapp.phonepulse.models.Variant; // ƒê·∫£m b·∫£o ƒë√£ import ƒë√∫ng Variant model
import com.phoneapp.phonepulse.request.OrderItem;
import com.phoneapp.phonepulse.utils.Constants;

import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class OrderItemAdapter extends RecyclerView.Adapter<OrderItemAdapter.OrderViewHolder> {

    private final List<OrderItem> orderItems;
    private static final String TAG = "OrderItemAdapter";

    public OrderItemAdapter(List<OrderItem> orderItems) {
        this.orderItems = orderItems;
        Log.d(TAG, "‚úÖ Kh·ªüi t·∫°o OrderItemAdapter - s·ªë l∆∞·ª£ng OrderItems = " + (orderItems != null ? orderItems.size() : 0));
    }

    @NonNull
    @Override
    public OrderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        Log.d(TAG, "üì¶ onCreateViewHolder() - T·∫°o ViewHolder m·ªõi.");
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_order_product, parent, false);
        return new OrderViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull OrderViewHolder holder, @SuppressLint("RecyclerView") int position) {
        if (orderItems == null || position < 0 || position >= orderItems.size()) {
            Log.w(TAG, "‚ö† onBindViewHolder: Danh s√°ch orderItems r·ªóng ho·∫∑c v·ªã tr√≠ kh√¥ng h·ª£p l·ªá.");
            return;
        }

        OrderItem item = orderItems.get(position);
        if (item == null) {
            Log.w(TAG, "‚ö† onBindViewHolder: OrderItem t·∫°i v·ªã tr√≠ " + position + " l√† null.");
            setDefaultUI(holder);
            return;
        }

        Log.d(TAG, "‚û°Ô∏è onBindViewHolder: X·ª≠ l√Ω OrderItem #" + position +
                " - ProductId: " + item.getProductId() +
                ", VariantId: " + item.getVariantId() +
                ", Gi√° trong OrderItem (ban ƒë·∫ßu): " + item.getPrice() +
                ", T√™n trong OrderItem (ban ƒë·∫ßu): " + item.getName() +
                ", Bi·∫øn th·ªÉ trong OrderItem (ban ƒë·∫ßu): " + item.getVariant());


        // --- LU√îN LU√îN hi·ªÉn th·ªã gi√° v√† s·ªë l∆∞·ª£ng t·ª´ OrderItem ƒë√£ c√≥ ---
        // Gi·∫£ ƒë·ªãnh `item.getPrice()` ƒë√£ c√≥ gi√° ƒë√∫ng t·ª´ backend (gi√° l√∫c ƒë·∫∑t h√†ng)
        holder.tvQuantity.setText("S·ªë l∆∞·ª£ng: " + Math.max(item.getQuantity(), 0));
        holder.tvPrice.setText("Gi√°: " + formatCurrency(item.getPrice()));


        // --- Logic ƒë·ªÉ c·∫≠p nh·∫≠t T√™n s·∫£n ph·∫©m, ·∫¢nh v√† T√äN BI·∫æN TH·ªÇ (t·ª´ Color/Size) n·∫øu ch√∫ng ch∆∞a c√≥ trong OrderItem ---
        // V√† c·∫≠p nh·∫≠t gi√° t·ª´ Variant n·∫øu price c·ªßa OrderItem l√† 0
        boolean needsProductApiCall = TextUtils.isEmpty(item.getName()) ||
                TextUtils.isEmpty(item.getImageUrl()) ||
                TextUtils.isEmpty(item.getVariant()) ||
                item.getPrice() <= 0; // V·∫´n c·∫ßn ki·ªÉm tra ƒë·ªÉ l·∫•y gi√° n·∫øu n√≥ l√† 0

        if (needsProductApiCall) {
            Log.d(TAG, "üü° OrderItem #" + position + " thi·∫øu th√¥ng tin hi·ªÉn th·ªã (t√™n, ·∫£nh, bi·∫øn th·ªÉ) ho·∫∑c gi√° l√† 0. G·ªçi API Product.");
            String token = Constants.getToken(holder.itemView.getContext());
            if (token == null || token.isEmpty()) {
                Log.e(TAG, "‚ùå Token r·ªóng khi g·ªçi API Product cho OrderItem #" + position);
                setDefaultUI(holder);
                return;
            }

            ApiService service = RetrofitClient.getApiService(token);
            service.getProductById(item.getProductId()).enqueue(new Callback<Product>() {
                @Override
                public void onResponse(Call<Product> call, Response<Product> response) {
                    if (response.isSuccessful() && response.body() != null) {
                        Product product = response.body();
                        Log.d(TAG, "‚úÖ API Product th√†nh c√¥ng cho ProductId: " + item.getProductId() + ", T√™n SP t·ª´ API: " + product.getName());

                        // C·∫≠p nh·∫≠t t√™n s·∫£n ph·∫©m n·∫øu OrderItem ch∆∞a c√≥
                        if (TextUtils.isEmpty(item.getName())) {
                            item.setName(product.getName());
                            holder.tvName.setText(item.getName());
                            Log.d(TAG, "    C·∫≠p nh·∫≠t t√™n s·∫£n ph·∫©m t·ª´ API: " + item.getName());
                        } else {
                            // N·∫øu OrderItem ƒë√£ c√≥ t√™n, hi·ªÉn th·ªã n√≥
                            holder.tvName.setText(item.getName());
                        }

                        // C·∫≠p nh·∫≠t URL ·∫£nh n·∫øu OrderItem ch∆∞a c√≥
                        if (TextUtils.isEmpty(item.getImageUrl())) {
                            item.setImageUrl(product.getImageUrlSafe());
                            Glide.with(holder.itemView.getContext())
                                    .load(item.getImageUrl())
                                    .placeholder(R.drawable.placeholder_product)
                                    .error(R.drawable.placeholder_product)
                                    .into(holder.ivImage);
                            Log.d(TAG, "    C·∫≠p nh·∫≠t ·∫£nh t·ª´ API: " + item.getImageUrl());
                        } else {
                            // N·∫øu OrderItem ƒë√£ c√≥ ·∫£nh, t·∫£i n√≥
                            Glide.with(holder.itemView.getContext())
                                    .load(item.getImageUrl())
                                    .placeholder(R.drawable.placeholder_product)
                                    .error(R.drawable.placeholder_product)
                                    .into(holder.ivImage);
                        }

                        // --- Logic l·∫•y T√äN BI·∫æN TH·ªÇ v√† GI√Å t·ª´ Variant ---
                        String displayVariantName = "";
                        double priceFromVariant = 0; // Gi√° s·∫Ω l·∫•y t·ª´ Variant

                        if (product.getVariants() != null && !product.getVariants().isEmpty()) {
                            for (Variant v : product.getVariants()) {
                                if (v.getId().equals(item.getVariantId())) {
                                    // X√¢y d·ª±ng t√™n bi·∫øn th·ªÉ t·ª´ Color v√† Size
                                    String colorName = (v.getColor() != null) ? v.getColor().getColorName() : "";
                                    String sizeName = (v.getSize() != null) ? v.getSize().getSizeName() : "";

                                    if (!TextUtils.isEmpty(colorName) && !TextUtils.isEmpty(sizeName)) {
                                        displayVariantName = colorName + ", " + sizeName;
                                    } else if (!TextUtils.isEmpty(colorName)) {
                                        displayVariantName = colorName;
                                    } else if (!TextUtils.isEmpty(sizeName)) {
                                        displayVariantName = sizeName;
                                    }
                                    Log.d(TAG, "    T√¨m th·∫•y Variant kh·ªõp. T√™n bi·∫øn th·ªÉ (t·ª´ Color/Size): " + displayVariantName);

                                    // L·∫•y gi√° t·ª´ Variant
                                    priceFromVariant = v.getPrice();
                                    Log.d(TAG, "    Gi√° t·ª´ Variant (API): " + priceFromVariant);
                                    break;
                                }
                            }
                        }

                        // C·∫≠p nh·∫≠t tr∆∞·ªùng 'variant' trong OrderItem n·∫øu ch∆∞a c√≥ (ƒë·ªÉ hi·ªÉn th·ªã v√† l∆∞u t·∫°m)
                        if (TextUtils.isEmpty(item.getVariant())) {
                            item.setVariant(displayVariantName);
                            Log.d(TAG, "    C·∫≠p nh·∫≠t t√™n bi·∫øn th·ªÉ trong OrderItem: " + item.getVariant());
                        }

                        // Hi·ªÉn th·ªã t√™n bi·∫øn th·ªÉ (∆∞u ti√™n t·ª´ OrderItem, n·∫øu kh√¥ng th√¨ d√πng t·ª´ API fetch)
                        if (!TextUtils.isEmpty(item.getVariant())) {
                            holder.tvVariant.setText(item.getVariant());
                            holder.tvVariant.setVisibility(View.VISIBLE);
                        } else if (!TextUtils.isEmpty(displayVariantName)) {
                            holder.tvVariant.setText(displayVariantName);
                            holder.tvVariant.setVisibility(View.VISIBLE);
                        } else {
                            holder.tvVariant.setVisibility(View.GONE);
                            Log.d(TAG, "    Kh√¥ng th·ªÉ hi·ªÉn th·ªã t√™n bi·∫øn th·ªÉ.");
                        }


                        // QUAN TR·ªåNG: C·∫≠p nh·∫≠t gi√° c·ªßa OrderItem CH·ªà KHI N√ì ƒêANG L√Ä 0 t·ª´ ban ƒë·∫ßu.
                        // V√† gi√° ƒë√≥ ph·∫£i ƒë∆∞·ª£c l·∫•y t·ª´ Variant.
                        if (item.getPrice() <= 0 && priceFromVariant > 0) {
                            item.setPrice((int)priceFromVariant); // C·∫≠p nh·∫≠t gi√° c·ªßa OrderItem
                            holder.tvPrice.setText("Gi√°: " + formatCurrency(item.getPrice())); // C·∫≠p nh·∫≠t UI
                            Log.d(TAG, "    ‚ö† ƒê√£ c·∫≠p nh·∫≠t gi√° OrderItem t·ª´ API Variant (gi√° ban ƒë·∫ßu l√† 0): " + item.getPrice());
                        } else if (item.getPrice() <= 0 && priceFromVariant <= 0) {
                            Log.w(TAG, "    Kh√¥ng th·ªÉ l·∫•y gi√° bi·∫øn th·ªÉ t·ª´ API ƒë·ªÉ c·∫≠p nh·∫≠t OrderItem (gi√° bi·∫øn th·ªÉ c≈©ng l√† 0 ho·∫∑c kh√¥ng t√¨m th·∫•y).");
                            // Gi·ªØ nguy√™n gi√° 0 ho·∫∑c c·∫≠p nh·∫≠t UI ƒë·ªÉ c·∫£nh b√°o
                            holder.tvPrice.setText("Gi√°: N/A"); // Ho·∫∑c gi·ªØ nguy√™n 0 ƒë
                        }


                    } else {
                        String errorBody = "";
                        try {
                            if (response.errorBody() != null) {
                                errorBody = response.errorBody().string();
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "L·ªói ƒë·ªçc errorBody khi g·ªçi API Product: " + e.getMessage());
                        }
                        Log.e(TAG, "‚ùå L·ªói ph·∫£n h·ªìi API Product cho ProductId: " + item.getProductId() + ". Code: " + response.code() + ", Message: " + response.message() + ", Error Body: " + errorBody);
                        setDefaultUI(holder);
                    }
                }

                @Override
                public void onFailure(Call<Product> call, Throwable t) {
                    Log.e(TAG, "‚ùå L·ªói k·∫øt n·ªëi API Product cho ProductId: " + item.getProductId() + ": " + t.getMessage(), t);
                    setDefaultUI(holder);
                }
            });
        } else {
            // N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß trong OrderItem (t√™n, ·∫£nh, bi·∫øn th·ªÉ v√† gi√° kh√°c 0) th√¨ bind tr·ª±c ti·∫øp
            Log.d(TAG, "‚úÖ OrderItem #" + position + " ƒë√£ c√≥ ƒë·ªß th√¥ng tin. Bind tr·ª±c ti·∫øp.");
            holder.tvName.setText(item.getName());
            holder.tvVariant.setText(item.getVariant());
            holder.tvVariant.setVisibility(!TextUtils.isEmpty(item.getVariant()) ? View.VISIBLE : View.GONE);
            Glide.with(holder.itemView.getContext())
                    .load(item.getImageUrl())
                    .placeholder(R.drawable.placeholder_product)
                    .error(R.drawable.placeholder_product)
                    .into(holder.ivImage);
        }
    }

    @Override
    public int getItemCount() {
        return orderItems != null ? orderItems.size() : 0;
    }

    static class OrderViewHolder extends RecyclerView.ViewHolder {
        ImageView ivImage;
        TextView tvName, tvVariant, tvQuantity, tvPrice;

        public OrderViewHolder(@NonNull View itemView) {
            super(itemView);
            ivImage = itemView.findViewById(R.id.iv_product_image);
            tvName = itemView.findViewById(R.id.tv_product_name);
            tvVariant = itemView.findViewById(R.id.tv_product_variant);
            tvQuantity = itemView.findViewById(R.id.tv_product_quantity);
            tvPrice = itemView.findViewById(R.id.tv_product_price);
        }
    }

    private String formatCurrency(int amount) {
        try {
            return String.format("%,d ƒë", amount).replace(",", ".");
        } catch (Exception e) {
            Log.w(TAG, "‚ö† ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá th·∫•t b·∫°i: " + e.getMessage());
            return amount + " ƒë";
        }
    }

    private void setDefaultUI(OrderViewHolder holder) {
        holder.tvName.setText("S·∫£n ph·∫©m kh√¥ng r√µ");
        holder.tvQuantity.setText("S·ªë l∆∞·ª£ng: 0");
        holder.tvPrice.setText("Gi√°: 0 ƒë");
        holder.tvVariant.setVisibility(View.GONE);
        holder.ivImage.setImageResource(R.drawable.placeholder_product);
    }
}