package com.phoneapp.phonepulse.ui.cart;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.gson.Gson;
import com.phoneapp.phonepulse.Adapter.CartAdapter;
import com.phoneapp.phonepulse.R;
import com.phoneapp.phonepulse.Response.ApiResponse;
import com.phoneapp.phonepulse.VIEW.Oder_Activity;
import com.phoneapp.phonepulse.data.api.ApiService;
import com.phoneapp.phonepulse.data.api.RetrofitClient;
import com.phoneapp.phonepulse.models.Cart;
import com.phoneapp.phonepulse.request.CartItem;
import com.phoneapp.phonepulse.request.CartRequest; // Import CartRequest ƒë·ªÉ s·ª≠ d·ª•ng c√°c nested class
import com.phoneapp.phonepulse.request.OrderItem;
import com.phoneapp.phonepulse.utils.Constants;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class Cart_Activity extends AppCompatActivity implements CartAdapter.OnCartItemActionListener {

    private RecyclerView rvCartItems;
    private CartAdapter cartAdapter;
    private List<CartItem> currentCartItems;
    private LinearLayout emptyCartView;
    private LinearLayout cartActionBar;
    private LinearLayout bottomCheckoutBar;
    private TextView tvTotalPrice;
    private Button btnCheckout;
    private Button btnShopNow;
    private ProgressBar progressBar;

    private ApiService apiService;
    private List<OrderItem> orderItemList = new ArrayList<>();
    private double totalPrice = 0;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cart);

        // √Ånh x·∫° View
        Toolbar toolbar = findViewById(R.id.toolbar_cart);
        rvCartItems = findViewById(R.id.rv_cart_items);
        emptyCartView = findViewById(R.id.empty_cart_view);
        cartActionBar = findViewById(R.id.cart_action_bar);
        bottomCheckoutBar = findViewById(R.id.bottom_checkout_bar);
        tvTotalPrice = findViewById(R.id.tv_total_price);
        btnCheckout = findViewById(R.id.btn_checkout);
        btnShopNow = findViewById(R.id.btn_shop_now);
        progressBar = findViewById(R.id.progressBar);

        // Thi·∫øt l·∫≠p toolbar
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setTitle("Gi·ªè h√†ng c·ªßa b·∫°n");
        }

        // Kh·ªüi t·∫°o RecyclerView
        currentCartItems = new ArrayList<>();
        cartAdapter = new CartAdapter(currentCartItems);
        cartAdapter.setOnCartItemActionListener(this); // ƒê·∫∑t listener cho Adapter
        rvCartItems.setLayoutManager(new LinearLayoutManager(this));
        rvCartItems.setAdapter(cartAdapter);

        // X·ª≠ l√Ω n√∫t "Mua s·∫Øm ngay" (khi gi·ªè h√†ng tr·ªëng)
        btnShopNow.setOnClickListener(v -> {
            finish();
        });
        // X·ª≠ l√Ω n√∫t "Thanh to√°n"
        btnCheckout.setOnClickListener(v -> {
            Intent intent = new Intent(Cart_Activity.this, Oder_Activity.class);
            intent.putParcelableArrayListExtra("order_items", new ArrayList<>(orderItemList));
            intent.putExtra("total_price", totalPrice);
            startActivity(intent);
        });


        // T·∫£i d·ªØ li·ªáu gi·ªè h√†ng khi activity ƒë∆∞·ª£c t·∫°o
        fetchCartData();
    }

    @Override
    protected void onResume() {
        super.onResume();
        // T·∫£i l·∫°i d·ªØ li·ªáu gi·ªè h√†ng m·ªói khi Activity tr·ªü l·∫°i foreground
        fetchCartData();
    }

    private void fetchCartData() {
        String token = Constants.getToken(this); // L·∫•y token t·ª´ Constants

        if (token == null || token.isEmpty()) {
            Toast.makeText(this, "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng.", Toast.LENGTH_LONG).show();
            showEmptyCartView(true);
            return;
        }

        // Kh·ªüi t·∫°o apiService v·ªõi token hi·ªán t·∫°i
        apiService = RetrofitClient.getApiService(token);

        progressBar.setVisibility(View.VISIBLE);
        Call<ApiResponse<Cart>> call = apiService.getCart(); // G·ªçi getCart() kh√¥ng tham s·ªë token
        call.enqueue(new Callback<ApiResponse<Cart>>() {
            @Override
            public void onResponse(Call<ApiResponse<Cart>> call, Response<ApiResponse<Cart>> response) {
                progressBar.setVisibility(View.GONE);



                if (response.isSuccessful() && response.body() != null) {
                    ApiResponse<Cart> apiResponse = response.body();


                    if (apiResponse.isSuccess() && apiResponse.getData() != null) {
                        Cart cart = apiResponse.getData();

                        if (cart.getItems() != null && !cart.getItems().isEmpty()) {
                            currentCartItems.clear();
                            currentCartItems.addAll(cart.getItems());
                            cartAdapter.setCartItemList(currentCartItems);

                            // üîß Chu·∫©n b·ªã orderItemList
                            orderItemList.clear();
                            for (CartItem cartItem : currentCartItems) {
                                if (cartItem.getProduct() != null && cartItem.getVariant() != null) {
                                    String name = cartItem.getProduct().getProductName();
                                    String imageUrl = cartItem.getProductImage();
                                    int price = (int) cartItem.getVariant().getPrice();
                                    int quantity = cartItem.getQuantity();


                                    orderItemList.add(new OrderItem(name, imageUrl, price, quantity));
                                } else {
                                }
                            }

                            showEmptyCartView(false);
                            updateTotalPrice();
                        } else {
                            currentCartItems.clear();
                            cartAdapter.setCartItemList(currentCartItems);
                            orderItemList.clear();
                            showEmptyCartView(true);
                            updateTotalPrice();
                        }
                    } else {
                        Toast.makeText(Cart_Activity.this, apiResponse.getMessage() != null ? apiResponse.getMessage() : "L·ªói khi l·∫•y gi·ªè h√†ng", Toast.LENGTH_SHORT).show();
                        showEmptyCartView(true);
                    }
                } else {
                    String errorBodyString = "N/A";
                    try {
                        if (response.errorBody() != null) {
                            errorBodyString = response.errorBody().string();
                        }
                    } catch (Exception e) {

                    }
                    Toast.makeText(Cart_Activity.this, "L·ªói k·∫øt n·ªëi ho·∫∑c ph·∫£n h·ªìi server: " + response.code(), Toast.LENGTH_SHORT).show();

                }
            }


            @Override
            public void onFailure(Call<ApiResponse<Cart>> call, Throwable t) {
                progressBar.setVisibility(View.GONE);
                Toast.makeText(Cart_Activity.this, "L·ªói m·∫°ng: " + t.getMessage(), Toast.LENGTH_SHORT).show();
                showEmptyCartView(true);
                Log.e("Cart_Activity", "Network Failure: " + t.getMessage(), t);
            }
        });
    }


    private void updateTotalPrice() {
        totalPrice = 0;
        int totalItems = 0;
        for (CartItem item : currentCartItems) {
            if (item.getVariant() != null && item.getProduct() != null) {
                totalPrice += item.getVariant().getPrice() * item.getQuantity();
                totalItems += item.getQuantity();
            }
        }
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
        currencyFormat.setMaximumFractionDigits(0);
        tvTotalPrice.setText(currencyFormat.format(totalPrice));
        btnCheckout.setText("Thanh to√°n (" + totalItems + ")");
    }


    private void showEmptyCartView(boolean isEmpty) {
        if (isEmpty) {
            emptyCartView.setVisibility(View.VISIBLE);
            rvCartItems.setVisibility(View.GONE);
            cartActionBar.setVisibility(View.GONE);
            bottomCheckoutBar.setVisibility(View.GONE);
        } else {
            emptyCartView.setVisibility(View.GONE);
            rvCartItems.setVisibility(View.VISIBLE);
            cartActionBar.setVisibility(View.VISIBLE);
            bottomCheckoutBar.setVisibility(View.VISIBLE);
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    // --- Tri·ªÉn khai CartAdapter.OnCartItemActionListener ---
    @Override
    public void onQuantityChange(CartItem item, int newQuantity) {
        if (newQuantity <= 0) {
            // N·∫øu s·ªë l∆∞·ª£ng l√† 0 ho·∫∑c √¢m, Adapter ƒë√£ x·ª≠ l√Ω hi·ªÉn th·ªã dialog x√≥a.
            // N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n x√≥a, onRemoveItem s·∫Ω ƒë∆∞·ª£c g·ªçi.
            // ·ªû ƒë√¢y, ch√∫ng ta ch·ªâ c·∫ßn ƒë·∫£m b·∫£o UI kh√¥ng hi·ªÉn th·ªã s·ªë l∆∞·ª£ng √¢m/0 n·∫øu ng∆∞·ªùi d√πng ch∆∞a x√°c nh·∫≠n x√≥a.
            cartAdapter.notifyDataSetChanged(); // ƒê·∫£m b·∫£o UI kh·ªõp v·ªõi d·ªØ li·ªáu g·ªëc n·∫øu kh√¥ng c√≥ h√†nh ƒë·ªông API
            return;
        }

        // ƒê·∫£m b·∫£o item.getProduct() v√† item.getVariant() kh√¥ng null
        if (item.getProduct() == null || item.getVariant() == null) {
            Toast.makeText(this, "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: D·ªØ li·ªáu s·∫£n ph·∫©m b·ªã thi·∫øu.", Toast.LENGTH_SHORT).show();
            cartAdapter.notifyDataSetChanged(); // C·∫≠p nh·∫≠t l·∫°i UI ƒë·ªÉ s·ªë l∆∞·ª£ng kh√¥ng b·ªã thay ƒë·ªïi ·∫£o
            return;
        }

        String productId = item.getProduct().getId();
        String variantId = item.getVariant().getId();
        String token = Constants.getToken(this);

        if (token == null || token.isEmpty()) {
            Toast.makeText(this, "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng.", Toast.LENGTH_LONG).show();
            cartAdapter.notifyDataSetChanged(); // C·∫≠p nh·∫≠t l·∫°i UI ƒë·ªÉ s·ªë l∆∞·ª£ng kh√¥ng b·ªã thay ƒë·ªïi ·∫£o
            return;
        }

        // T·∫°o request body
        CartRequest.UpdateCartItem request = new CartRequest.UpdateCartItem(productId, variantId, newQuantity);

        // ƒê·∫£m b·∫£o apiService ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi token hi·ªán t·∫°i
        apiService = RetrofitClient.getApiService(token);

        progressBar.setVisibility(View.VISIBLE);
        apiService.updateCartItem(request).enqueue(new Callback<ApiResponse<Cart>>() {
            @Override
            public void onResponse(Call<ApiResponse<Cart>> call, Response<ApiResponse<Cart>> response) {
                progressBar.setVisibility(View.GONE);
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    Toast.makeText(Cart_Activity.this, "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                    // G·ªçi l·∫°i fetchCartData ƒë·ªÉ t·∫£i l·∫°i to√†n b·ªô gi·ªè h√†ng v√† c·∫≠p nh·∫≠t UI m·ªôt c√°ch nh·∫•t qu√°n
                    fetchCartData();
                } else {
                    String errorMsg = "L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    } else if (response.errorBody() != null) {
                        try {
                            errorMsg += " " + response.errorBody().string();
                        } catch (Exception e) {
                            Log.e("Cart_Activity", "Error parsing error body for update quantity", e);
                        }
                    }
                    Toast.makeText(Cart_Activity.this, errorMsg, Toast.LENGTH_LONG).show();
                    Log.e("Cart_Activity", "Update quantity API failed: " + response.code() + " - " + errorMsg);
                    cartAdapter.notifyDataSetChanged(); // C·∫≠p nh·∫≠t l·∫°i UI ƒë·ªÉ s·ªë l∆∞·ª£ng kh√¥ng b·ªã thay ƒë·ªïi ·∫£o n·∫øu l·ªói
                }
            }

            @Override
            public void onFailure(Call<ApiResponse<Cart>> call, Throwable t) {
                progressBar.setVisibility(View.GONE);
                Toast.makeText(Cart_Activity.this, "L·ªói m·∫°ng khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng: " + t.getMessage(), Toast.LENGTH_LONG).show();
                Log.e("Cart_Activity", "Update quantity network failure: ", t);
                cartAdapter.notifyDataSetChanged(); // C·∫≠p nh·∫≠t l·∫°i UI ƒë·ªÉ s·ªë l∆∞·ª£ng kh√¥ng b·ªã thay ƒë·ªïi ·∫£o n·∫øu l·ªói m·∫°ng
            }
        });
    }

    @Override
    public void onRemoveItem(CartItem item) {
        // ƒê·∫£m b·∫£o item.getProduct() v√† item.getVariant() kh√¥ng null
        if (item.getProduct() == null || item.getVariant() == null) {
            Log.e("Cart_Activity", "Product or Variant data missing for item during removal.");
            Toast.makeText(this, "Kh√¥ng th·ªÉ x√≥a: D·ªØ li·ªáu s·∫£n ph·∫©m b·ªã thi·∫øu.", Toast.LENGTH_SHORT).show();
            return;
        }

        String productId = item.getProduct().getId();
        String variantId = item.getVariant().getId();
        String token = Constants.getToken(this);

        if (token == null || token.isEmpty()) {
            Toast.makeText(this, "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.", Toast.LENGTH_LONG).show();
            return;
        }

        // T·∫°o request body
        CartRequest.RemoveCartItem request = new CartRequest.RemoveCartItem(productId, variantId);

        // ƒê·∫£m b·∫£o apiService ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi token hi·ªán t·∫°i
        apiService = RetrofitClient.getApiService(token);

        progressBar.setVisibility(View.VISIBLE);
        apiService.removeFromCart(request).enqueue(new Callback<ApiResponse<Cart>>() {
            @Override
            public void onResponse(Call<ApiResponse<Cart>> call, Response<ApiResponse<Cart>> response) {
                progressBar.setVisibility(View.GONE);
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    Toast.makeText(Cart_Activity.this, "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                    // G·ªçi l·∫°i fetchCartData ƒë·ªÉ t·∫£i l·∫°i to√†n b·ªô gi·ªè h√†ng v√† c·∫≠p nh·∫≠t UI m·ªôt c√°ch nh·∫•t qu√°n
                    fetchCartData();
                } else {
                    String errorMsg = "L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.";
                    if (response.body() != null && response.body().getMessage() != null) {
                        errorMsg = response.body().getMessage();
                    } else if (response.errorBody() != null) {
                        try {
                            errorMsg += " " + response.errorBody().string();
                        } catch (Exception e) {
                            Log.e("Cart_Activity", "Error parsing error body for remove item", e);
                        }
                    }
                    Toast.makeText(Cart_Activity.this, errorMsg, Toast.LENGTH_LONG).show();
                    Log.e("Cart_Activity", "Remove item API failed: " + response.code() + " - " + errorMsg);
                }
            }

            @Override
            public void onFailure(Call<ApiResponse<Cart>> call, Throwable t) {
                progressBar.setVisibility(View.GONE);
                Toast.makeText(Cart_Activity.this, "L·ªói m·∫°ng khi x√≥a s·∫£n ph·∫©m: " + t.getMessage(), Toast.LENGTH_LONG).show();
                Log.e("Cart_Activity", "Remove item network failure: ", t);
            }
        });
    }

    @Override
    public void onItemSelected(CartItem item, boolean isSelected) {
        // Logic cho checkbox ch·ªçn item (n·∫øu ƒë∆∞·ª£c tri·ªÉn khai)
    }
}