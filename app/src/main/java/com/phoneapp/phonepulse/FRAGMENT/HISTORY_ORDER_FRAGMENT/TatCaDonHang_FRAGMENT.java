package com.phoneapp.phonepulse.FRAGMENT.HISTORY_ORDER_FRAGMENT;

import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.phoneapp.phonepulse.Adapter.OrderAdapter;
import com.phoneapp.phonepulse.Adapter.OrderItemAdapter; // Gi·ªØ l·∫°i n·∫øu b·∫°n c√≥ OrderItemAdapter ri√™ng cho vi·ªác hi·ªÉn th·ªã order_items tr·ª±c ti·∫øp
import com.phoneapp.phonepulse.R;
import com.phoneapp.phonepulse.Response.ApiResponse;
import com.phoneapp.phonepulse.data.api.ApiService;
import com.phoneapp.phonepulse.data.api.RetrofitClient;
import com.phoneapp.phonepulse.models.Order; // Import Order model
import com.phoneapp.phonepulse.request.OrderItem; // Import OrderItem request model
import com.phoneapp.phonepulse.utils.Constants;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class TatCaDonHang_FRAGMENT extends Fragment {

    private static final String TAG = "TatCaDonHang_FRAGMENT";
    private RecyclerView rvOrders; // ƒê·ªïi t√™n ƒë·ªÉ r√µ r√†ng h∆°n: ƒë√¢y l√† RecyclerView cho danh s√°ch c√°c ƒê∆°n h√†ng
    private OrderAdapter orderAdapter;
    // private OrderItemAdapter orderItemAdapter; // C√≥ th·ªÉ kh√¥ng c·∫ßn n·∫øu OrderAdapter ƒë√£ ƒë·ªß ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt Order

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.tatcadonhang_fragment, container, false);

        rvOrders = view.findViewById(R.id.rv_order_item); // Gi·ªØ nguy√™n ID layout n·∫øu kh√¥ng mu·ªën s·ª≠a layout
        rvOrders.setLayoutManager(new LinearLayoutManager(getContext()));

        // 1Ô∏è‚É£ Ki·ªÉm tra n·∫øu Activity g·ª≠i d·ªØ li·ªáu s·∫£n ph·∫©m v·ª´a ƒë·∫∑t qua Bundle (v√≠ d·ª•: sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng)
        Bundle bundle = getArguments();
        if (bundle != null) {
            // Tr∆∞·ªùng h·ª£p nh·∫≠n danh s√°ch OrderItem tr·ª±c ti·∫øp (v√≠ d·ª•: ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt m·ªôt ƒë∆°n h√†ng ngay sau khi t·∫°o)
            if (bundle.containsKey("order_items")) {
                ArrayList<OrderItem> orderItems = bundle.getParcelableArrayList("order_items");
                if (orderItems != null && !orderItems.isEmpty()) {
                    Log.d(TAG, "üü¢ Nh·∫≠n ƒë∆∞·ª£c " + orderItems.size() + " s·∫£n ph·∫©m t·ª´ Bundle (order_items) ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt OrderItem.");
                    for (OrderItem item : orderItems) {
                        Log.d(TAG, "    Bundle OrderItem: " + item.toString());
                    }
                    // N·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã m·ªôt danh s√°ch c√°c OrderItem ri√™ng l·∫ª m√† kh√¥ng b·ªçc trong Order,
                    // th√¨ b·∫°n s·∫Ω c·∫ßn m·ªôt OrderItemAdapter cho tr∆∞·ªùng h·ª£p n√†y.
                    // N·∫øu kh√¥ng, b·∫°n c·∫ßn t·∫°o m·ªôt Order gi·∫£ ƒë·ªÉ OrderAdapter c√≥ th·ªÉ x·ª≠ l√Ω.
                    // V√≠ d·ª•: T·∫°o m·ªôt Order gi·∫£ ch·ª©a c√°c OrderItem n√†y
                    Order tempOrder = new Order();
                    tempOrder.setItems(orderItems);
                    // C√≥ th·ªÉ set c√°c th√¥ng tin kh√°c cho tempOrder n·∫øu c·∫ßn
                    List<Order> singleOrderList = new ArrayList<>();
                    singleOrderList.add(tempOrder);

                    orderAdapter = new OrderAdapter(getContext(), singleOrderList);
                    rvOrders.setAdapter(orderAdapter);
                    return view; // Tr·∫£ v·ªÅ view n·∫øu c√≥ d·ªØ li·ªáu t·ª´ Bundle
                }
            }
            // Tr∆∞·ªùng h·ª£p nh·∫≠n m·ªôt ƒë·ªëi t∆∞·ª£ng Order ƒë·∫ßy ƒë·ªß qua Bundle (v√≠ d·ª•: xem chi ti·∫øt m·ªôt ƒë∆°n h√†ng ƒë√£ c√≥)
            if (bundle.containsKey("order_detail")) {
                Order order = (Order) bundle.getSerializable("order_detail");
                if (order != null) {
                    Log.d(TAG, "üü¢ Nh·∫≠n ƒë∆∞·ª£c m·ªôt Order t·ª´ Bundle (order_detail): ID " + order.getId() + ", Final Price: " + order.getFinalPrice());
                    if (order.getItems() != null) {
                        Log.d(TAG, "    S·ªë l∆∞·ª£ng OrderItems trong Order t·ª´ Bundle: " + order.getItems().size());
                        for (OrderItem item : order.getItems()) {
                            Log.d(TAG, "      Bundle OrderItem (t·ª´ order_detail): " + item.toString());
                        }
                    } else {
                        Log.w(TAG, "    Order t·ª´ Bundle kh√¥ng c√≥ OrderItems.");
                    }
                    List<Order> orders = new ArrayList<>();
                    orders.add(order);
                    orderAdapter = new OrderAdapter(getContext(), orders);
                    rvOrders.setAdapter(orderAdapter);
                    return view; // Tr·∫£ v·ªÅ view n·∫øu c√≥ d·ªØ li·ªáu t·ª´ Bundle
                }
            }
        }

        // 2Ô∏è‚É£ N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu truy·ªÅn sang qua Bundle, th√¨ g·ªçi API ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng
        Log.d(TAG, "üü° Kh√¥ng c√≥ d·ªØ li·ªáu Order t·ª´ Bundle. B·∫Øt ƒë·∫ßu g·ªçi API.");
        fetchOrdersFromApi();

        return view;
    }

    private void fetchOrdersFromApi() {
        String rawToken = Constants.getToken(requireContext());
        if (rawToken == null || rawToken.isEmpty()) {
            Toast.makeText(getContext(), "Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", Toast.LENGTH_SHORT).show();
            Log.e(TAG, "‚ùå L·ªói: Token r·ªóng ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
            return;
        }

        ApiService service = RetrofitClient.getApiService(rawToken);
        Call<ApiResponse<List<Order>>> call = service.getUserOrders();
        Log.d(TAG, "üöÄ ƒêang g·ªçi API getUserOrders...");

        call.enqueue(new Callback<ApiResponse<List<Order>>>() {
            @Override
            public void onResponse(Call<ApiResponse<List<Order>>> call, Response<ApiResponse<List<Order>>> response) {
                if (response.isSuccessful() && response.body() != null) {
                    ApiResponse<List<Order>> apiResponse = response.body();
                    Log.d(TAG, "‚úÖ API Response: Th√†nh c√¥ng = " + apiResponse.isSuccess() + ", Message = " + apiResponse.getMessage());

                    if (apiResponse.isSuccess()) {
                        List<Order> orders = apiResponse.getData();
                        if (orders != null && !orders.isEmpty()) {
                            Log.d(TAG, "üì¶ S·ªë l∆∞·ª£ng Orders nh·∫≠n ƒë∆∞·ª£c t·ª´ API: " + orders.size());
                            for (Order order : orders) {
                                Log.d(TAG, "    Order ID: " + order.getId() + ", Final Price: " + order.getFinalPrice() + ", Status: " + order.getStatus());
                                if (order.getItems() != null) { // ‚úÖ ƒê√£ ƒë·ªïi t·ª´ getOrderItems() sang getItems()
                                    Log.d(TAG, "      S·ªë l∆∞·ª£ng OrderItems trong Order " + order.getId() + ": " + order.getItems().size());
                                    for (OrderItem item : order.getItems()) {
                                        Log.d(TAG, "        API OrderItem: " + item.toString()); // ‚úÖ LOG: Ki·ªÉm tra OrderItem t·ª´ API
                                    }
                                } else {
                                    Log.w(TAG, "      Order " + order.getId() + " kh√¥ng c√≥ OrderItems.");
                                }
                            }
                            orderAdapter = new OrderAdapter(getContext(), orders);
                            rvOrders.setAdapter(orderAdapter);
                        } else {
                            Log.w(TAG, "‚ö† API tr·∫£ v·ªÅ danh s√°ch Order r·ªóng.");
                            Toast.makeText(getContext(), "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Log.e(TAG, "‚ùå API tr·∫£ v·ªÅ l·ªói: " + apiResponse.getMessage());
                        Toast.makeText(getContext(), "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng: " + apiResponse.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                } else {
                    String errorBody = "";
                    try {
                        if (response.errorBody() != null) {
                            errorBody = response.errorBody().string();
                        }
                    } catch (Exception e) {
                        Log.e(TAG, "L·ªói ƒë·ªçc errorBody: " + e.getMessage());
                    }
                    Log.e(TAG, "‚ùå L·ªói ph·∫£n h·ªìi t·ª´ server. Code: " + response.code() + ", Message: " + response.message() + ", Error Body: " + errorBody);
                    Toast.makeText(getContext(), "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng. M√£ l·ªói: " + response.code(), Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<ApiResponse<List<Order>>> call, Throwable t) {
                Log.e(TAG, "‚ùå L·ªói k·∫øt n·ªëi API: " + t.getMessage(), t);
                Toast.makeText(getContext(), "L·ªói k·∫øt n·ªëi: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }
}